#!/usr/bin/env node
// -*- mode: js2; -*-

const
fs        = require('fs'),
commander = require('commander'),
moment    = require('moment-timezone'),
sprintf   = require('sprintf'),
strategy  = require('../lib/strategy'),
db        = require('../lib/db'),
h         = require('../lib/helpers')

function id(v) { return v }

commander
  .option('-x, --exchange <name>', 'exchange to fill', id, 'bittrex')
  .option('-c, --currency <pair>', 'currency pair to fill')
  .option('-s, --strategy <name>', 'trading strategy to use', id, 'Example')
  .option('-g, --config <file>', 'optional configuration JSON for strategy')
  .option('-f, --fee <percentage>', 'fee for trades as a percentage', Number.parseFloat, 0.0025)
  .option('-d, --date <date>', 'date and time to start trading', id, '2017-09-15T00:00:00-07')
  .option('-u, --utc-offset <offset>', 'Print times using the given UTC offset instead of local time', Number.parseInt)
  .option('-t, --timezone <timezone>', 'Print times using the given time zone (for better daylight savings handling)')
  .parse(process.argv)

if (!commander.currency) {
  console.warn('--currency <pair> is required')
  process.exit(1)
}

let StrategyClass = strategy[commander.strategy]
let startTime     = moment(commander.date)
let endTime       = moment()
let exchange      = commander.exchange
let currencyPair  = commander.currency
let d             = db[commander.exchange]
let fee           = commander.fee

let ts
if (typeof commander.utcOffset !== 'undefined') {
  ts = ((m) => moment(m).utcOffset(commander.utcOffset).format())
} else if (commander.timezone) {
  ts = ((m) => moment(m).tz(commander.timezone).format())
} else {
  ts = ((m) => moment(m).format())
}


let config = {}
if (commander.config) {
  try {
    config = JSON.parse(fs.readFileSync(commander.config, 'utf8'))
  } catch(err) {
    console.warn(err)
    process.exit(1)
  }
}
let s = new StrategyClass(config)

let [baseCurrency, currency] = currencyPair.split('-')
let wallet           = {}
wallet[baseCurrency] = 1.0
wallet[currency]     = 0

console.log(ts(startTime), sprintf("%8s", 'begin'), wallet)

;(async function(){
  try {
    // let the strategy initialize itself
    let r0 = await s.init({ startTime, currencyPair, exchange })

    // load price data with timestamps as { close, time }
    console.log(r0)
    console.log(currencyPair, startTime, endTime)
    let prices = await d.prices(currencyPair, startTime, endTime)

    let newWallet = prices.reduce((w, p) => {
      let price   = p.close
      let time    = moment(p.time)
      p.time      = time
      let action  = s.action(p)
      if (action) {
        let amount = action.amount

        // This is a bit too idealistic.
        // In actual trading, the actual buyPrice may end up higher, and the sellPrice may end up lower.
        // This is good enough for a simulation though.
        if (action.method === 'buy') {
          let buyPrice      = amount * price + (amount * price * fee)
          w[baseCurrency]  -= buyPrice
          w[currency]      += amount
        } else if (action.method === 'sell') {
          let sellPrice     = amount * price - (amount * price * fee)
          w[baseCurrency]  += sellPrice
          w[currency]      -= amount
        }

        console.log(ts(time), sprintf("%8s", action.method), w, action)
      }
      return w
    }, wallet)

    let lastTime = moment(prices[prices.length - 1].time)
    console.log(ts(lastTime), sprintf("%8s", 'end'), newWallet)
  } catch (e) {
    console.warn(e)
  }
})()
